import os
import logging
import asyncio
import re
import uuid
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter, CommandObject, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from decimal import Decimal
from database import Database
from games import CubeGame, GameResult, TwoDiceGame, RockPaperScissorsGame, BasketballGame, DartsGame, SlotsGame, BowlingGame
from cryptopay import CryptoPayAPI
from typing import Optional, Dict
import random
import time
import aiosqlite
import aiogram.exceptions

class AdminStates(StatesGroup):
    EDIT_USER = State()
    SEARCH_USERS = State()
    CONFIRM_DELETE = State()
    BROADCAST = State()
    BROADCAST_BUTTONS = State()
    CHECK_BALANCE = State()
    ADD_BALANCE = State()

class GameStates(StatesGroup):
    DICE_BET = State()
    DICE_TWO_BET = State()
    RPS_BET = State()
    BET_AMOUNT = State()

class BettingStates(StatesGroup):
    SELECT_GAME = State()
    SELECT_BET_TYPE = State()
    ENTER_AMOUNT = State()


load_dotenv()


logging.basicConfig(level=logging.INFO)


bot = Bot(token=os.getenv('BOT_TOKEN'), default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
db = Database()
crypto_pay = CryptoPayAPI(os.getenv('CRYPTO_PAY_TOKEN'))


CASINO_NAME = os.getenv('CASINO_NAME', 'GlacialCasino')
CASINO_EMOJI = os.getenv('CASINO_EMOJI', 'üé≤')


INVOICE_URL = os.getenv('INVOICE_URL')
LOGS_ID = -1002870089940
BETS_ID = -1002696966128
BETS_LINK = os.getenv('BETS_CHANNEL_LINK')


SUPPORT_LINK = os.getenv('SUPPORT_LINK')
ADAPTER_LINK = os.getenv('ADAPTER_LINK')
RULES_LINK = os.getenv('RULES_LINK')
CHAT_LINK = os.getenv('CHAT_LINK')
TUTORIAL_LINK = os.getenv('TUTORIAL_LINK')
NEWS_LINK = os.getenv('NEWS_LINK')

GIDE_LINK = os.getenv('GIDE_LINK')

async def links():
    return f"""
<a href="https://t.me/{(await bot.get_me()).username}?start=refs">ü§ù C–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ</a> | <a href="{GIDE_LINK}">üí¨ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</a> | <a href="https://t.me/{(await bot.get_me()).username}?start=">üé∞ –ù–∞—à –±–æ—Ç</a> | <a href="{NEWS_LINK}">‚ùì –ù–æ–≤–æ—Å—Ç–∏</a>
""".replace("\n", "")

@dp.message(Command("cancel"))
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("‚ùé –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.")
    else:
        await state.clear()
        await message.answer("‚ùå –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.", reply_markup=create_main_keyboard())

def create_main_keyboard():
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [
            KeyboardButton(text="üé≤ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É")
        ],
        [
            KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
            KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        ],
        [
            KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
        ]
    ], resize_keyboard=True)
    return keyboard

def create_info_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=SUPPORT_LINK),
            InlineKeyboardButton(text="–ü–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫", url=ADAPTER_LINK)
        ],
        [InlineKeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞", url=RULES_LINK)],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_in_start")]
    ])
    return keyboard

def create_user_management_keyboard(user_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–†–µ—Ñ.–ë–∞–ª–∞–Ω—Å", callback_data=f"edit_ref_balance_{user_id}"),
            InlineKeyboardButton(text="–†–µ—Ñ.–ó–∞—Ä–∞–±–æ—Ç–æ–∫", callback_data=f"edit_ref_earnings_{user_id}")
        ],
        [
            InlineKeyboardButton(text="–†–µ—Ñ.–°—á–µ—Ç—á–∏–∫", callback_data=f"edit_ref_count_{user_id}"),
            InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_user_{user_id}")
        ],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_users")]
    ])

@dp.message(CommandStart(), StateFilter('*'))
async def start_handler(message: types.Message, command: CommandObject, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name
    args = command.args  # ‚Üê –∞—Ä–≥—É–º–µ–Ω—Ç –ø–æ—Å–ª–µ /start=

    # 1. –í—ã–ø–ª–∞—Ç–∞
    if args and len(args) == 8:
        check = await db.get_win_check_token(args)
        if not check:
            await message.answer("<b>–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.</b>", parse_mode="HTML")
            return
        if check['user_id'] != user_id:
            await message.answer("<b>–≠—Ç–æ—Ç —á–µ–∫ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–µ –¥–ª—è –≤–∞—Å.</b>", parse_mode="HTML")
            return
        win_amount = check['amount']
        check_link = check['check_link']
        if check_link:
            await db.mark_win_check_token_used(args)
            await message.answer(
                f"<b>–ó–∞–±–µ—Ä–∏—Ç–µ –≤–∞—à –≤—ã–∏–≥—Ä—ã—à –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ</b>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=f"–ó–∞–±—Ä–∞—Ç—å {win_amount:.2f}$", url=check_link)]
                ])
            )
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return

    # 2. –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
    if args and args.isdigit():
        referrer_id = int(args)
        user = await db.get_user(referrer_id)
        current_user = await db.get_user(user_id)
        if user and not current_user and user_id != referrer_id:
            await db.create_user(user_id, username, referrer_id)
            await db.update_ref_balance(referrer_id, user['ref_balance'])
            await message.answer("üéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!")
            await bot.send_message(
                chat_id=referrer_id,
                text=f"üë§ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: <code>{username}</code>",
                parse_mode="HTML"
            )

    # 3. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    elif args == "games":
        await db.create_user(user_id, username)
        await start_betting(message, state)
        return
    elif args == "refs":
        await db.create_user(user_id, username)
        await show_referral_msg(message)
        return

    # 4. –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å
    await db.create_user(user_id, username)
    welcome_text = (
        f"üé∞ <b>{username}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {CASINO_NAME}</b>\n\n"
        f"<b>BunnyCasino ‚Äî –∑–¥–µ—Å—å —É–¥–∞—á–∞ —Å–∞–º–∞ –ø—Ä–∏—Å–∫–∞—á–µ—Ç –∫ –í–∞–º!</b>\n\n"
        f"<blockquote><b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ–ø–∏—à–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b></blockquote>"
    )
    await message.answer_animation(
        animation=types.FSInputFile("menu.gif"),
        caption=welcome_text,
        reply_markup=create_main_keyboard(),
        parse_mode="HTML"
    )


@dp.message(Command("profile"))
@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile_msg(message: types.Message):
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    username = message.from_user.username or message.from_user.full_name

    await message.answer("üë§") # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏
    await asyncio.sleep(1.5) # –ñ–¥–µ–º 1.5 —Å–µ–∫—É–Ω–¥—ã

    if not user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–æ–∑–¥–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
        return
    
    profile_text = (
        f"<b>{ username}, -  –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"<blockquote>üë§ –ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ —Å–∞–º–∞—è –Ω—É–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –í–∞—Å</blockquote>\n\n"
        f"<blockquote>"
        f"‚Ä¢ <b>ID:</b> <code>{user_id}</code>\n"
        f"‚Ä¢ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> <code>{user['ref_balance']:.2f}$</code>\n"
        f"‚Ä¢ <b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> <code>{user['ref_earnings']:.2f}$</code>\n"
        f"‚Ä¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> <code>{user['ref_count']}</code>"
        f"</blockquote>"
    )

    await message.answer_photo(
        photo=types.FSInputFile("profile.jpg"),
        caption=profile_text,
        reply_markup=create_main_keyboard(),
        parse_mode="HTML"
    )
@dp.message(Command("refs"))
@dp.message(F.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
async def show_referral_msg(message: types.Message):
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    username = message.from_user.username or message.from_user.full_name

    await message.answer("üë•") # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏
    await asyncio.sleep(1.5) # –ñ–¥–µ–º 1.5 —Å–µ–∫—É–Ω–¥—ã

    if not user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–æ–∑–¥–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
        return
    
    referral_text = (
        f"<b>{ username }, - —ç—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ {CASINO_NAME}</b>\n\n"
        f"<blockquote>üéÅ –ü—Ä–∏–≤–æ–¥–∏—Ç–µ –∫ –Ω–∞–º –í–∞—à–∏—Ö –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 15% –æ—Ç –∏—Ö –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π</blockquote>\n\n"
        f"<blockquote>"
        f"‚Ä¢ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> <code>{user.get('ref_balance', 0):.2f}$</code>\n"
        f"‚Ä¢ <b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> <code>{user.get('ref_earnings', 0):.2f}$</code>\n"
        f"‚Ä¢ <b>–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> <code>{user.get('ref_count', 0)} —á–µ–ª.</code>\n"
        f"‚Ä¢ <b><a href='https://t.me/{(await bot.get_me()).username}?start={user_id}'>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ (–∑–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)</a></b>\n"
        f"</blockquote>\n\n"
        f"<blockquote>"
        f"‚ö† <b>–ï—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç, —Å –í–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è 15% –æ—Ç –µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞.</b>\n"
        f"‚ö† <b>–ë–∞–ª–∞–Ω—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.</b>"
        f"</blockquote>"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –í—ã–≤–æ–¥", callback_data="withdraw_ref_balance")]
    ])
    
    await message.answer_photo(
        photo=types.FSInputFile("referal.jpg"),
        caption=referral_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
@dp.message(Command("stats"))
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats_msg(message: types.Message):
    user_id = message.from_user.id
    stats = await db.get_user_stats(user_id)
    username = message.from_user.username or message.from_user.full_name
    
    await message.answer("üìä") # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏
    await asyncio.sleep(1.5) # –ñ–¥–µ–º 1.5 —Å–µ–∫—É–Ω–¥—ã
    
    stats_text = (
        f"<b>{ username }, - —ç—Ç–æ –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {CASINO_NAME}</b>\n\n"
        f"<blockquote>üìä –†–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Ü–µ–Ω–∏—Ç–µ–ª–µ–π —Ü–∏—Ñ—Ä</blockquote>\n\n"
        f"<blockquote>"
        f"‚Ä¢ <b>–í—Å–µ–≥–æ –∏–≥—Ä:</b> <code>{stats['total_games']}</code>\n"
        f"‚Ä¢ <b>–ü–æ–±–µ–¥:</b> <code>{stats['wins']}</code>\n"
        f"‚Ä¢ <b>–ü–æ—Ä–∞–∂–µ–Ω–∏–π:</b> <code>{stats['losses']}</code>\n"
        f"‚Ä¢ <b>–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:</b> <code>{stats['win_rate']:.1f}%</code>\n"
        f"‚Ä¢ <b>–û–±–æ—Ä–æ—Ç:</b> <code>{stats['turnover']:.2f}$</code>\n"
        f"‚Ä¢ <b>–í—ã–∏–≥—Ä–∞–Ω–æ –≤—Å–µ–≥–æ:</b> <code>{stats['total_won']:.2f}$</code>\n"
        f"‚Ä¢ <b>–ü—Ä–æ–∏–≥—Ä–∞–Ω–æ –≤—Å–µ–≥–æ:</b> <code>{stats['total_lost']:.2f}$</code>"
        f"</blockquote>"
    )
    
    await message.answer_photo(
        photo=types.FSInputFile("profile.jpg"),
        caption=stats_text,
        reply_markup=create_main_keyboard(),
        parse_mode="HTML"
    )

GAMES_DATA = {
    "cube": {
        "name": "üé≤ –ö—É–±–∏–∫",
        "types": {
            "—á–µ—Ç": "–ß–µ—Ç (x1.85)", "–Ω–µ—á–µ—Ç": "–ù–µ—á–µ—Ç (x1.85)", 
            "–±–æ–ª—å—à–µ": "–ë–æ–ª—å—à–µ 3 (x1.85)", "–º–µ–Ω—å—à–µ": "–ú–µ–Ω—å—à–µ 4 (x1.85)", 
            "–ø–ª–∏–Ω–∫–æ": "–ü–ª–∏–Ω–∫–æ (x0.3-1.95)",
            "1": "–ß–∏—Å–ª–æ 1 (x4)", "2": "–ß–∏—Å–ª–æ 2 (x4)", "3": "–ß–∏—Å–ª–æ 3 (x4)",
            "4": "–ß–∏—Å–ª–æ 4 (x4)", "5": "–ß–∏—Å–ª–æ 5 (x4)", "6": "–ß–∏—Å–ª–æ 6 (x4)",
            "—Å–µ–∫—Ç–æ—Ä1": "–°–µ–∫—Ç–æ—Ä 1 (x2.5)", "—Å–µ–∫—Ç–æ—Ä2": "–°–µ–∫—Ç–æ—Ä 2 (x2.5)", "—Å–µ–∫—Ç–æ—Ä3": "–°–µ–∫—Ç–æ—Ä 3 (x2.5)"
        }
    },
    "two_dice": {
        "name": "üé≤üé≤ –î–≤–∞ –∫—É–±–∏–∫–∞",
        "types": {"–ø–æ–±–µ–¥–∞1": "–ü–æ–±–µ–¥–∞ 1 (x1.85)", "–ø–æ–±–µ–¥–∞2": "–ü–æ–±–µ–¥–∞ 2 (x1.85)", "–Ω–∏—á—å—è": "–ù–∏—á—å—è (x3)"}
    },
    "rock_paper_scissors": {
        "name": "üëä –ö–ù–ë",
        "types": {"–∫–∞–º–µ–Ω—å": "üëä (x2.5)", "–Ω–æ–∂–Ω–∏—Ü—ã": "‚úåÔ∏è (x2.5)", "–±—É–º–∞–≥–∞": "‚úã (x2.5)"}
    },
    "basketball": {
        "name": "üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª",
        "types": {"–≥–æ–ª": "–ì–æ–ª (x1.85)", "–º–∏–º–æ": "–ú–∏–º–æ (x1.4)"}
    },
    "darts": {
        "name": "üéØ –î–∞—Ä—Ç—Å",
        "types": {"–±–µ–ª–æ–µ": "–ë–µ–ª–æ–µ (x1.85)", "–∫—Ä–∞—Å–Ω–æ–µ": "–ö—Ä–∞—Å–Ω–æ–µ (x1.85)", "—è–±–ª–æ—á–∫–æ": "–Ø–±–ª–æ—á–∫–æ (x2.5)", "–ø—Ä–æ–º–∞—Ö": "–ú–∏–º–æ (x2.5)"}
    },
    "slots": {
        "name": "üé∞ –°–ª–æ—Ç—ã",
        "types": {"—Å–ª–æ—Ç—ã": "–ò–≥—Ä–∞—Ç—å (x5-10)"}
    },
    "bowling": {
        "name": "üé≥ –ë–æ—É–ª–∏–Ω–≥",
        "types": {"—Å—Ç—Ä–∞–π–∫": "–°—Ç—Ä–∞–π–∫ (x4)", "–±–æ—É–ª–ø—Ä–æ–º–∞—Ö": "–ü—Ä–æ–º–∞—Ö (x4)", "–±–æ—É–ª–∏–Ω–≥": "–ü–ª–∏–Ω–∫–æ (x0-4)", "–±–æ—É–ª–ø–æ–±–µ–¥–∞": "–ü–æ–±–µ–¥–∞ –≤ –¥—É—ç–ª–∏ (x1.85)", "–±–æ—É–ª–ø–æ—Ä–∞–∂–µ–Ω–∏–µ": "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ –¥—É—ç–ª–∏ (x1.85)"}
    }
}
@dp.message(Command("games"), StateFilter('*'))
@dp.message(F.text == "üé≤ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", StateFilter('*'))
async def start_betting(message: types.Message, state: FSMContext):
    await message.answer_dice(emoji="üé≤") # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É–±–∏–∫
    await asyncio.sleep(1.5) # –ñ–¥–µ–º 1.5 —Å–µ–∫—É–Ω–¥—ã
    game_items = list(GAMES_DATA.items())
    buttons = []
    for i in range(0, len(game_items), 3):  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 3
        row = []
        for j in range(3):  
            if i + j < len(game_items):
                row.append(InlineKeyboardButton(text=game_items[i+j][1]["name"], callback_data=f"game_{game_items[i+j][0]}"))
        buttons.append(row)

 
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await message.answer(
        text=f"üé≤ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(BettingStates.SELECT_GAME)

@dp.callback_query(F.data == "cancel_bet")
async def cancel_betting(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.message.delete()
    await callback_query.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@dp.callback_query(F.data.startswith("cancel_bet_payment"))
async def cancel_bet_payment(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.message.delete()
    await callback_query.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@dp.callback_query(F.data.startswith("game_"), StateFilter(BettingStates.SELECT_GAME, BettingStates.ENTER_AMOUNT))
async def select_game(callback_query: types.CallbackQuery, state: FSMContext):
    game_key = callback_query.data.split("_", 1)[1]
    if game_key not in GAMES_DATA:
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∏–≥—Ä–∞!", show_alert=True)
        return

    await state.update_data(game_key=game_key)
    
    game_types = GAMES_DATA[game_key]["types"]
    
    game_types_items = list(game_types.items())
    buttons = []
    for i in range(0, len(game_types_items), 3):
        row = []
        for j in range(3): # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 3
            if i + j < len(game_types_items):
                key, name = game_types_items[i+j]
                row.append(InlineKeyboardButton(text=name, callback_data=f"type_{key}"))
        buttons.append(row)

    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data="back_to_games")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback_query.message.edit_text(f"<b>–ò–≥—Ä–∞: {GAMES_DATA[game_key]['name']}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥:", reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(BettingStates.SELECT_BET_TYPE)
    await callback_query.answer()

@dp.callback_query(F.data == "back_to_games", BettingStates.SELECT_BET_TYPE)
async def back_to_games(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(BettingStates.SELECT_GAME)
    game_items = list(GAMES_DATA.items())
    buttons = []
    for i in range(0, len(game_items), 3):
        row = []
        for j in range(3):
            if i + j < len(game_items):
                row.append(InlineKeyboardButton(text=game_items[i+j][1]["name"], callback_data=f"game_{game_items[i+j][0]}"))
        buttons.append(row)

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback_query.message.edit_text("<b>üé≤ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:</b>", reply_markup=keyboard, parse_mode="HTML")
    await callback_query.answer()


@dp.callback_query(F.data.startswith("type_"), BettingStates.SELECT_BET_TYPE)
async def select_bet_type(callback_query: types.CallbackQuery, state: FSMContext):
    bet_type_key = callback_query.data.split("_", 1)[1]
    
    data = await state.get_data()
    game_key = data.get("game_key")

    if not game_key or bet_type_key not in GAMES_DATA[game_key]["types"]:
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å—Ç–∞–≤–∫–∏!", show_alert=True)
        return

    await state.update_data(bet_type_key=bet_type_key)
    
    game_name = GAMES_DATA[game_key]['name']
    bet_type_name = GAMES_DATA[game_key]['types'][bet_type_key]

    await callback_query.message.edit_text(f"<b>–ò–≥—Ä–∞: {game_name}</b>\n<b>–ò—Å—Ö–æ–¥: {bet_type_name}</b>\n\n"
                                          "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö ($)\n"
                                          "<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 0.1$</i>", 
                                          parse_mode="HTML",
                                          reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                              [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"game_{game_key}")]
                                          ]))
    await state.set_state(BettingStates.ENTER_AMOUNT)
    await callback_query.answer()


@dp.message(BettingStates.ENTER_AMOUNT)
async def enter_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
        if amount < 0.1:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: 0.1$")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    data = await state.get_data()
    game_key = data.get("game_key")
    bet_type_key = data.get("bet_type_key")
    user_id = message.from_user.id
    
    payload = f"bet_{uuid.uuid4().hex}"

    await db.add_invoice_bet(payload, user_id, game_key, bet_type_key, amount)

    invoice = await crypto_pay.create_invoice(
        asset="USDT",
        amount=str(amount),
        description=f"–°—Ç–∞–≤–∫–∞ –≤ {GAMES_DATA[game_key]['name']} (Payload: {payload})",
        payload=payload,
        expires_in=3600 # 1 —á–∞—Å
    )

    if invoice and invoice.get("ok"):
        invoice_result = invoice.get("result")
        pay_url = invoice_result.get("pay_url")
        
        await message.answer(
            f"‚úÖ <b>–í–∞—à —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å—Ç–∞–≤–∫–∏ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"<b>–°—É–º–º–∞:</b> <code>{amount:.2f} USDT</code>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ. –°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 1 —á–∞—Å.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=pay_url)],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_bet_payment")]
            ]),
            parse_mode="HTML"
        )
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        logging.error(f"Invoice creation failed for user {user_id}: {invoice}")
        await state.clear()

@dp.callback_query(lambda c: c.data == "info_user")
async def show_info(callback_query: types.CallbackQuery):
    await callback_query.answer(f"–ò–Ω—Ñ–æ {CASINO_NAME}")

    info_text = (
        f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b> <code>{CASINO_NAME}</code>"
    )
    
    await callback_query.message.edit_caption(
        caption=info_text,
        reply_markup=create_info_keyboard(),
        parse_mode="HTML"
    )

async def is_admin(user_id: int) -> bool:
    return str(user_id) == os.getenv("ADMIN_USER_ID")

@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    if not await is_admin(message.from_user.id):
        return
        
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üí∞ CryptoBot", callback_data="admin_cryptobot")],
        [InlineKeyboardButton(text="üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast")]
    ])
    
    await message.answer("üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(lambda c: c.data == "admin_users")
async def show_users(callback_query: types.CallbackQuery):
    if not await is_admin(callback_query.from_user.id):
        await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
        
    users = await db.get_all_users(limit=10)
    
    text = "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
    for user in users:
        text += (
            f"<code>{user['user_id']}</code> | {user['username']}\n"
            f"–†–µ—Ñ.–±–∞–ª–∞–Ω—Å: <code>{user['ref_balance']:.2f}$</code>\n"
            f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <code>{user['ref_earnings']:.2f}$</code>\n"
            f"–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <code>{user['ref_count']}</code>\n"
            f"–ü—Ä–∏–≥–ª–∞—Å–∏–ª: <code>{user.get('referrer_username', '–Ω–µ—Ç')}</code>\n"
            f"–î–∞—Ç–∞: <code>{user['created_at']}</code>\n\n"
        )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–∏—Å–∫", callback_data="search_users")],
        [InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è", callback_data="users_next_10")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ])

    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "admin_stats")
async def show_admin_stats(callback_query: types.CallbackQuery):
    if not await is_admin(callback_query.from_user.id):
        await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    stats = await db.get_admin_stats()
    
    text = "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
    text += f"<blockquote><b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ: <code>{stats['total_users']}</code>\n"
    text += f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: <code>{stats['today_users']}</code>\n"
    text += f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: <code>{stats['week_users']}</code></blockquote>\n\n"
    
    text += f"<blockquote><b>–ò–≥—Ä—ã —Å–µ–≥–æ–¥–Ω—è:</b>\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ: <code>{stats['today_games']}</code>\n"
    text += f"‚Ä¢ –í—ã–∏–≥—Ä–∞–Ω–æ: <code>{stats['today_wins']}</code>\n"
    text += f"‚Ä¢ –ü—Ä–æ–∏–≥—Ä–∞–Ω–æ: <code>{stats['today_losses']}</code>\n"
    text += f"‚Ä¢ –û–±–æ—Ä–æ—Ç: <code>{stats['today_turnover']:.2f}$</code>\n"
    text += f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å: <code>{(stats['today_earned'] - stats['today_spent']):.2f}$</code></blockquote>\n\n"
    
    text += f"<blockquote><b>–ò–≥—Ä—ã –∑–∞ –Ω–µ–¥–µ–ª—é:</b>\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ: <code>{stats['week_games']}</code>\n"
    text += f"‚Ä¢ –í—ã–∏–≥—Ä–∞–Ω–æ: <code>{stats['week_wins']}</code>\n"
    text += f"‚Ä¢ –ü—Ä–æ–∏–≥—Ä–∞–Ω–æ: <code>{stats['week_losses']}</code>\n"
    text += f"‚Ä¢ –û–±–æ—Ä–æ—Ç: <code>{stats['week_turnover']:.2f}$</code>\n"
    text += f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å: <code>{(stats['week_earned'] - stats['week_spent']):.2f}$</code></blockquote>"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ])

    try:
        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    except:
        pass

    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "back_to_admin")
async def back_to_admin_panel(callback_query: types.CallbackQuery):
    if not await is_admin(callback_query.from_user.id):
        await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
        
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üí∞ CryptoBot", callback_data="admin_cryptobot")],
        [InlineKeyboardButton(text="üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast")]
    ])
    
    await callback_query.message.edit_text("üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", reply_markup=keyboard, parse_mode="HTML")
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "search_users")
async def search_users_cmd(callback_query: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback_query.from_user.id):
        return
    
    await state.set_state(AdminStates.SEARCH_USERS)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await callback_query.answer()

@dp.message(AdminStates.SEARCH_USERS)
async def process_user_search(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        return

    users = await db.search_users(message.text)
    if not users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await state.clear()
        return

    text = "<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b>\n\n"
    for user in users:
        text += (
            f"<code>{user['user_id']}</code> | {user['username']}\n"
            f"–†–µ—Ñ.–±–∞–ª–∞–Ω—Å: <code>{user['ref_balance']:.2f}$</code>\n"
            f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <code>{user['ref_earnings']:.2f}$</code>\n"
            f"–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <code>{user['ref_count']}</code>\n"
            f"–ü—Ä–∏–≥–ª–∞—Å–∏–ª: <code>{user.get('referrer_username', '–Ω–µ—Ç')}</code>\n"
            f"–î–∞—Ç–∞: <code>{user['created_at']}</code>\n\n"
        )
        keyboard = create_user_management_keyboard(user['user_id'])
        await message.answer(text, reply_markup=keyboard)

    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("edit_"))
async def handle_edit_user(callback_query: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback_query.from_user.id):
        return

    action, field, user_id = callback_query.data.split("_")
    await state.update_data(field=field, user_id=user_id)
    await state.set_state(AdminStates.EDIT_USER)
    
    field_names = {
        "balance": "–±–∞–ª–∞–Ω—Å",
        "ref_balance": "—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å",
        "ref_earnings": "–∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤",
        "ref_count": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤",
        "referrer": "ID –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ"
    }
    
    await callback_query.message.answer(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field_names.get(field, field)}'"
    )
    await callback_query.answer()

@dp.message(AdminStates.EDIT_USER)
async def process_edit_user(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        return

    data = await state.get_data()
    field = data['field']
    user_id = int(data['user_id'])
    
    try:
        value = float(message.text) if field != "referrer" else int(message.text)
        updates = {field: value}
        
        if await db.update_user(user_id, updates):
            await message.answer(f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            

            user = await db.get_user(user_id)
            text = (
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user['user_id']}</code>\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: <code>{user['balance']:.2f}$</code>\n"
                f"üîÑ –†–µ—Ñ.–±–∞–ª–∞–Ω—Å: <code>{user['ref_balance']:.2f}$</code>\n"
                f"üíé –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <code>{user['ref_earnings']:.2f}$</code>\n"
                f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <code>{user['ref_count']}</code>\n"
                f"üîó –ü—Ä–∏–≥–ª–∞—Å–∏–ª: <code>{user.get('referrer_id', '–Ω–µ—Ç')}</code>"
            )
            keyboard = create_user_management_keyboard(user_id)
            await message.answer(text, reply_markup=keyboard)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è")
    
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("delete_user_"))
async def confirm_delete_user(callback_query: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback_query.from_user.id):
        return

    user_id = int(callback_query.data.split("_")[2])
    await state.update_data(user_id=user_id)
    await state.set_state(AdminStates.CONFIRM_DELETE)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_delete_{user_id}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_delete")
        ]
    ])
    
    await callback_query.message.answer(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>?",
        reply_markup=keyboard
    )
    await callback_query.answer()

@dp.callback_query(lambda c: c.data.startswith("confirm_delete_"))
async def process_delete_user(callback_query: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback_query.from_user.id):
        return

    user_id = int(callback_query.data.split("_")[2])
    if await db.delete_user(user_id):
        await callback_query.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω")
    else:
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    await state.clear()
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "cancel_delete")
async def cancel_delete_user(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback_query.answer()

@dp.callback_query(lambda c: c.data.startswith("users_next_"))
async def show_more_users(callback_query: types.CallbackQuery):
    if not await is_admin(callback_query.from_user.id):
        return

    offset = int(callback_query.data.split("_")[2])
    users = await db.get_all_users(limit=10, offset=offset)
    
    if not users:
        await callback_query.answer("–ë–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç")
        return

    text = "<b>üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
    for user in users:
        text += (
            f"<code>{user['user_id']}</code> | {user['username']}\n"
            f"üîÑ –†–µ—Ñ.–±–∞–ª–∞–Ω—Å: <code>{user['ref_balance']:.2f}$</code>\n"
            f"üíé –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <code>{user['ref_earnings']:.2f}$</code>\n"
            f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <code>{user['ref_count']}</code>\n"
            f"üîó –ü—Ä–∏–≥–ª–∞—Å–∏–ª: <code>{user.get('referrer_username', '–Ω–µ—Ç')}</code>\n"
            f"üìÖ –î–∞—Ç–∞: <code>{user['created_at']}</code>\n\n"
        )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="search_users")],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"users_next_{max(0, offset-10)}"),
            InlineKeyboardButton(text="‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"users_next_{offset+10}")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ])

    try:
        await callback_query.message.edit_text(text, reply_markup=keyboard)
    except:
        pass

    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "broadcast")
async def start_broadcast(callback_query: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback_query.from_user.id):
        await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
        
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")],
    ])
    
    await callback_query.message.edit_text(
        "üì® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Ç.–¥.).\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∫ –Ω–µ–º—É.",
        reply_markup=keyboard
    )
    await state.set_state(AdminStates.BROADCAST)
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "cancel_broadcast")
async def cancel_broadcast(callback_query: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback_query.from_user.id):
        await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
        
    await state.clear()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üí∞ CryptoBot", callback_data="admin_cryptobot")],
        [InlineKeyboardButton(text="üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast")]
    ])
    await callback_query.message.edit_text("üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", reply_markup=keyboard, parse_mode="HTML")
    await callback_query.answer()

@dp.message(AdminStates.BROADCAST)
async def handle_broadcast_message(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        return
        

    await state.update_data(
        message_type=message.content_type,
        text=message.text if message.content_type == "text" else message.caption,
        file_id=getattr(message, message.content_type, {}).file_id if message.content_type != "text" else None,
        parse_mode="HTML" if message.content_type == "text" else None
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="add_button")],
        [
            InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_sending"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")
        ]
    ])
    
    preview_text = "üì® –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
    if message.content_type == "text":
        preview_text += message.text
    else:
        preview_text += message.caption if message.caption else "–ú–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ"
        
    await message.answer(preview_text, reply_markup=keyboard)
    await state.set_state(AdminStates.BROADCAST_BUTTONS)

@dp.callback_query(lambda c: c.data == "add_button")
async def add_broadcast_button(callback_query: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback_query.from_user.id):
        await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
        
    data = await state.get_data()
    buttons = data.get('buttons', [])
    
    if len(buttons) >= 10:  
        await callback_query.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–Ω–æ–ø–æ–∫ (10)", show_alert=True)
        return
        
    await callback_query.message.edit_text(
        "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ | https://example.com</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>–ù–∞—à –∫–∞–Ω–∞–ª | https://t.me/channel</code>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_button")]
        ])
    )
    await state.set_state(AdminStates.BROADCAST_BUTTONS)
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "cancel_add_button")
async def cancel_add_button(callback_query: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback_query.from_user.id):
        await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
        
    data = await state.get_data()
    buttons = data.get('buttons', [])
    
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="add_button")],
        [
            InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_sending"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")
        ]
    ])
    
    preview_text = "üì® –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
    if data['message_type'] == "text":
        preview_text += data['text']
    else:
        preview_text += data['text'] if data['text'] else "–ú–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ"
        
    if buttons:
        preview_text += "\n\nüîó –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:"
        for btn in buttons:
            preview_text += f"\n‚Ä¢ {btn['text']} -> {btn['url']}"
            
    await callback_query.message.edit_text(preview_text, reply_markup=keyboard)
    await callback_query.answer()

@dp.message(AdminStates.BROADCAST_BUTTONS)
async def handle_button_input(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        return
        
    if "|" not in message.text:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "<code>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ | https://example.com</code>",
            parse_mode="HTML"
        )
        return
        
    text, url = [x.strip() for x in message.text.split("|", 1)]
    
    if not url.startswith(("http://", "https://", "t.me/", "tg://")):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http://, https://, t.me/ –∏–ª–∏ tg://")
        return
        
    data = await state.get_data()
    buttons = data.get('buttons', [])
    buttons.append({"text": text, "url": url})
    await state.update_data(buttons=buttons)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="add_button")],
        [
            InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_sending"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")
        ]
    ])
    
    preview_text = "üì® –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
    if data['message_type'] == "text":
        preview_text += data['text']
    else:
        preview_text += data['text'] if data['text'] else "–ú–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ"
        
    preview_text += "\n\nüîó –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:"
    for btn in buttons:
        preview_text += f"\n‚Ä¢ {btn['text']} -> {btn['url']}"
        
    await message.answer(preview_text, reply_markup=keyboard, disable_web_page_preview=True)

@dp.callback_query(lambda c: c.data == "start_sending")
async def process_broadcast(callback_query: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback_query.from_user.id):
        await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    data = await state.get_data()
    buttons = data.get('buttons', [])
    

    inline_buttons = []
    for i in range(0, len(buttons), 2): 
        row = [InlineKeyboardButton(text=btn['text'], url=btn['url']) for btn in buttons[i:i+2]]
        inline_buttons.append(row)
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_buttons) if buttons else None


    users = await db.get_all_users(limit=10000)  # Increased limit for large broadcasts
    total_users = len(users)
    

    successful = 0
    failed = 0
    blocked = 0
    deleted = 0
    

    status_message = await callback_query.message.edit_text(
        "üì® –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞...\n\n"
        f"‚è≥ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0\n"
        "‚ùå –û—à–∏–±–æ–∫: 0\n"
        "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏: 0\n"
        "üóë –£–¥–∞–ª–∏–ª–∏: 0\n"
        "‚è± –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: 0 —Å–µ–∫\n"
        "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: 0%"
    )
    
    start_time = time.time()
    last_update = start_time
    
    for i, user in enumerate(users, 1):
        try:
            if data['message_type'] == "text":
                await bot.send_message(
                    user['user_id'],
                    data['text'],
                    parse_mode=data['parse_mode'],
                    reply_markup=keyboard
                )
            else:
                method = getattr(bot, f"send_{data['message_type']}")
                await method(
                    user['user_id'],
                    data['file_id'],
                    caption=data['text'],
                    reply_markup=keyboard
                )
            successful += 1
            
        except aiogram.exceptions.TelegramForbiddenError:
            blocked += 1
        except aiogram.exceptions.TelegramBadRequest as e:
            if "chat not found" in str(e).lower():
                deleted += 1
            else:
                failed += 1
        except Exception as e:
            failed += 1
            logging.error(f"Broadcast error for user {user['user_id']}: {e}")
            

        current_time = time.time()
        if current_time - last_update >= 3 or i == total_users:
            elapsed = int(current_time - start_time)
            progress = (i / total_users) * 100
            
            try:
                await status_message.edit_text(
                    "üì® –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n\n"
                    f"‚è≥ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                    f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {failed}\n"
                    f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏: {blocked}\n"
                    f"üóë –£–¥–∞–ª–∏–ª–∏: {deleted}\n"
                    f"‚è± –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed} —Å–µ–∫\n"
                    f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%"
                )
                last_update = current_time
            except:
                pass
                
        await asyncio.sleep(0.05)

    elapsed = int(time.time() - start_time)
    speed = total_users / elapsed if elapsed > 0 else 0
    
    await status_message.edit_text(
        "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed}\n"
        f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked}\n"
        f"üóë –£–¥–∞–ª—ë–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: {deleted}\n"
        f"‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed} —Å–µ–∫\n"
        f"‚ö°Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫\n\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful/total_users*100):.1f}%",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
        ])
    )
    
    await state.clear()

@dp.callback_query(lambda c: c.data == "admin_cryptobot")
async def show_cryptobot_balance(callback_query: types.CallbackQuery):
    if not await is_admin(callback_query.from_user.id):
        await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    try:
        balance_data = await crypto_pay.get_balance()
        balances = balance_data.get('result', [])
        balance_text = "<b>–ë–∞–ª–∞–Ω—Å CryptoBot</b>\n\n"
        if balances:
            for balance in balances:
                currency = balance.get('currency', '')
                available = float(balance.get('available', 0))
                balance_text += f"<b>{currency}:</b> <code>{available:.2f}</code>\n"
        else:
            balance_text += "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="add_cryptobot_balance")],
            [InlineKeyboardButton(text="üßæ –ê–∫—Ç–∏–≤–Ω—ã–µ —á–µ–∫–∏", callback_data="admin_checks")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_cryptobot_balance")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
        ])
        try:
            await callback_query.message.edit_text(
                balance_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        except aiogram.exceptions.TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer("–ë–∞–ª–∞–Ω—Å –∞–∫—Ç—É–∞–ª–µ–Ω")
            else:
                raise
    except Exception as e:
        logging.error(f"Error getting CryptoBot balance: {e}")
        error_text = (
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="refresh_cryptobot_balance")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
        ])
        await callback_query.message.edit_text(
            error_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "admin_checks")
async def admin_show_checks(callback_query: types.CallbackQuery):
    if not await is_admin(callback_query.from_user.id):
        await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    try:
        checks_data = await crypto_pay.get_checks(status="active", asset="USDT")
        
        await bot.send_message(callback_query.from_user.id, f"–û—Ç–≤–µ—Ç get_checks: {checks_data}")
        checks = checks_data.get('result', [])
        
        if isinstance(checks, dict) and 'checks' in checks:
            checks = checks['checks']
        if not isinstance(checks, list):
            checks = []
        if not checks:
            await callback_query.message.edit_text(
                "<b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–µ–∫–æ–≤</b>",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_cryptobot")]
                ]),
                parse_mode="HTML"
            )
            await callback_query.answer()
            return
        text = "<b>–ê–∫—Ç–∏–≤–Ω—ã–µ —á–µ–∫–∏ USDT</b>\n\n"
        keyboard = []
        for check in checks[:10]:
            amount = check.get('amount')
            hash_ = check.get('hash')
            status = check.get('status')
            created = check.get('created_at', '')
            text += f"<b>–°—É–º–º–∞:</b> <code>{amount}</code> | <b>hash:</b> <code>{hash_}</code> | <b>–°—Ç–∞—Ç—É—Å:</b> <code>{status}</code>\n"
            keyboard.append([InlineKeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {amount}$", callback_data=f"admin_delete_check_{hash_}")])
        keyboard.append([InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_refresh_checks")])
        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_cryptobot")])
        await callback_query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback_query.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ–∫–æ–≤:</b> {e}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_cryptobot")]
            ]),
            parse_mode="HTML"
        )
    await callback_query.answer()

@dp.callback_query(lambda c: c.data.startswith("admin_delete_check_"))
async def admin_delete_check(callback_query: types.CallbackQuery):
    if not await is_admin(callback_query.from_user.id):
        await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    hash_ = callback_query.data.replace("admin_delete_check_", "")
    try:
        result = await crypto_pay.delete_check(hash_)
        if result.get('ok'):
            await callback_query.answer("–ß–µ–∫ —É–¥–∞–ª—ë–Ω", show_alert=True)
        else:
            await callback_query.answer(f"–û—à–∏–±–∫–∞: {result.get('error', '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–µ–∫')}", show_alert=True)
    except Exception as e:
        await callback_query.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
    await admin_show_checks(callback_query)

@dp.callback_query(lambda c: c.data == "admin_refresh_checks")
async def admin_refresh_checks(callback_query: types.CallbackQuery):
    await admin_show_checks(callback_query)

@dp.callback_query(lambda c: c.data == "add_cryptobot_balance")
async def add_cryptobot_balance(callback_query: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback_query.from_user.id):
        await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await state.set_state(AdminStates.ADD_BALANCE)
    await callback_query.message.edit_text(
        "<b>üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ CryptoBot</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ USDT:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_balance")]
        ])
    )
    await callback_query.answer()

@dp.message(AdminStates.ADD_BALANCE)
async def process_add_balance(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        return
    
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
            

        invoice_data = await crypto_pay.create_invoice(
            asset="USDT",
            amount=str(amount),
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ CryptoBot –Ω–∞ {amount} USDT",
            hidden_message="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!"
        )
        
        if not invoice_data.get('result', {}).get('pay_url'):
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã")
            
        pay_url = invoice_data['result']['pay_url']
        

        await message.answer(
            "‚úÖ <b>–°—á–µ—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω</b>\n\n"
            f"<b>–°—É–º–º–∞:</b> <code>{amount}$</code>\n"
            f"<b>–í–∞–ª—é—Ç–∞:</b> <code>USDT</code>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url)],
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
            ])
        )
        

        await bot.send_message(
            chat_id=LOGS_ID,
            text=f"üí≥ <b>–°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ CryptoBot</b>\n\n"
                 f"<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {message.from_user.mention_html()}\n"
                 f"<b>–°—É–º–º–∞:</b> <code>{amount}$</code>\n"
                 f"<b>–í–∞–ª—é—Ç–∞:</b> <code>USDT</code>",
            parse_mode="HTML"
        )
        
    except ValueError:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É\n"
            "<i>–ü—Ä–∏–º–µ—Ä: 100.50</i>",
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"Error creating invoice: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞</b>\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}",
            parse_mode="HTML"
        )
    finally:
        await state.clear()

@dp.callback_query(lambda c: c.data == "cancel_add_balance")
async def cancel_add_balance(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
        ])
    )
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == "refresh_cryptobot_balance")
async def refresh_cryptobot_balance(callback_query: types.CallbackQuery):
    await show_cryptobot_balance(callback_query)



async def create_payment_check(amount: float, description: str = None) -> dict:
    try:
        if not description:
            description = f"–í—ã–∏–≥—Ä—ã—à {amount}$ –≤ {CASINO_NAME}"
        
        balance_data = await crypto_pay.get_balance()
        balances = balance_data.get('result', [])
        usdt_balance = 0
        
        for balance in balances:
            currency = balance.get('currency_code', '')
            available = balance.get('available', '0')
            
            if currency and currency.upper() == 'USDT':
                usdt_balance = float(available)
                break
        
        if usdt_balance < amount:
            await bot.send_message(
                chat_id=LOGS_ID,
                text=f"‚ö†Ô∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞</b>\n"
                     f"<b>–¢—Ä–µ–±—É–µ—Ç—Å—è:</b> <code>{amount}$</code>\n"
                     f"<b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> <code>{usdt_balance}$</code>",
                parse_mode="HTML"
            )
            return None
        
        result = await crypto_pay.create_check(
            asset="USDT",
            amount=str(amount),
            description=description,
            hidden_message=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –≤—ã–∏–≥—Ä—ã—à–µ–º –≤ {CASINO_NAME}!"
        )
        
        if result.get('ok') == True and 'result' in result:
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—é–¥–∞, —á—Ç–æ–±—ã –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞
            await bot.send_message(
                chat_id=LOGS_ID,
                text=f"üí∏ <b>–°–û–ó–î–ê–ù –ß–ï–ö –ù–ê –í–´–ü–õ–ê–¢–£</b>\n\n"
                     f"<b>–°—É–º–º–∞:</b> <code>{amount}$</code>\n"
                     f"<b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã:</b> <code>{usdt_balance - amount}$</code>",
                parse_mode="HTML"
            )

            check_data = result['result']
            return {
                'check_id': check_data.get('check_id'),
                'check_link': check_data.get('bot_check_url'),
                'amount': check_data.get('amount')
            }
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —á–µ–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω
        if result.get('ok') == False and 'error' in result:
            logging.error(f"CryptoPay check creation failed: {result['error']}")
        return None
    except Exception as e:
        logging.error(f"Error creating check: {e}")
        return None


async def process_game_result(message: types.Message, game_result: GameResult, state: FSMContext):
    user_id = message.from_user.id
    state_data = await state.get_data()
    bet_amount = state_data.get('bet_amount', 0)
    game_type = state_data.get('game_type', 'unknown')
    bet_type = state_data.get('bet_type', 'unknown')
    
    await state.clear()
    
    if game_type == 'rock_paper_scissors':
        if game_result.won:
            win_amount = float(game_result.amount)
            check_result = await create_payment_check(win_amount)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥–∏
            current_balance = await db.get_current_balance()
            await bot.send_message(
                chat_id=LOGS_ID,
                text=f"üí∞ <b>–í–´–ü–õ–ê–¢–ê –ß–ï–ö–û–ú </b>\n\n"
                     f"<b>–ò–≥—Ä–æ–∫:</b> {message.from_user.mention_html()}\n"
                     f"<b>ID:</b> <code>{user_id}</code>\n"
                     f"<b>–°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞:</b> <code>{win_amount}$</code>\n"
                     f"<b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã:</b> <code>{current_balance - float(win_amount)}$</code>",
                parse_mode="HTML"
            )
        return
    
    if game_result.won:
        win_amount = float(game_result.amount)
        check_result = await create_payment_check(win_amount)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥–∏
        current_balance = await db.get_current_balance()
        await bot.send_message(
            chat_id=LOGS_ID,
            text=f"üí∞ <b>–í–´–ü–õ–ê–¢–ê –ß–ï–ö–û–ú</b>\n\n"
                 f"<b>–ò–≥—Ä–æ–∫:</b> {message.from_user.mention_html()}\n"
                 f"<b>ID:</b> <code>{user_id}</code>\n"
                 f"<b>–°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞:</b> <code>{win_amount}$</code>\n"
                 f"<b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã:</b> <code>{current_balance - float(win_amount)}$</code>",
            parse_mode="HTML"
        )
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∏—Å—Ö–æ–¥–∞
    user = await db.get_user(user_id)
    referrer_id = user.get('referrer_id')
    
    if referrer_id:
        if game_result.won:
            ref_penalty = float(game_result.amount) * 0.15
            await db.update_ref_balance(referrer_id, -ref_penalty)
            await bot.send_message(
                chat_id=referrer_id,
                text=f"üí∏ –° –≤–∞—à–µ–≥–æ –†–µ—Ñ.–ë–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ <code>{ref_penalty:.2f}$</code> –∏–∑-–∑–∞ –≤—ã–∏–≥—Ä—ã—à–∞ <code>{game_result.amount:.2f}$</code>",
                parse_mode="HTML"
            )
        else:
            ref_reward = float(bet_amount) * 0.15
            await db.update_ref_balance(referrer_id, ref_reward)
            await bot.send_message(
                chat_id=referrer_id,
                text=f"üíµ –í–∞—à –†–µ—Ñ.–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <code>{ref_reward:.2f}$</code> –∏–∑-–∑–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–∞ <code>{game_result.amount:.2f}$</code>",
                parse_mode="HTML"
            )

@dp.message(GameStates.DICE_BET)
async def handle_dice_game(message: types.Message, state: FSMContext):
    dice = await message.answer_dice(emoji="üé≤")
    dice_value = dice.dice.value
    
    state_data = await state.get_data()
    bet_amount = float(state_data.get('bet_amount', 0))
    bet_type = state_data.get('bet_type', '')
    
    game = CubeGame(bet_amount)
    result = await game.process(bet_type, dice_value)
    
    await process_game_result(message, result, state)

@dp.channel_post()
async def check_messages(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π CryptoBot"""
    if message.chat.id != LOGS_ID:
        logging.info(f"Message from wrong chat: {message.chat.id} != {LOGS_ID}")
        return

    try:
        logging.info(f"Processing message from {message.chat.id}: {message.text or message.caption}")
       
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–ø–ª–∞—Ç—É –∏–Ω–≤–æ–π—Å–∞ –ø–æ payload
        text = message.text or message.caption or ""
        payload_match = re.search(r'payload: (bet_[a-f0-9]+)', text, re.IGNORECASE)
        
        if payload_match:
            payload = payload_match.group(1)
            logging.info(f"Found invoice payload: {payload}")
            bet_data = await db.get_invoice_bet(payload)
            
            if bet_data:
                logging.info(f"Processing invoice payment with payload: {payload}")
                
                user_info = None
                try:
                    user_info = await bot.get_chat(bet_data['user_id'])
                    user_name = user_info.full_name if user_info else f"User {bet_data['user_id']}"
                except Exception:
                    user_name = f"User {bet_data['user_id']}"

                data_for_process_bet = {
                    'id': bet_data['user_id'],
                    'name': user_name,
                    'usd_amount': bet_data['amount'],
                    'comment': bet_data['bet_type_key'],
                    'game': bet_data['game_key']
                }
                
                await process_bet(data_for_process_bet)
                await db.mark_invoice_bet_paid(payload)
                logging.info(f"Invoice bet {bet_data['invoice_id']} processed and marked as paid.")
            elif bet_data and bet_data['status'] == 'paid':
                logging.info(f"Invoice {bet_data['invoice_id']} with payload {payload} already processed.")
            else:
               
                pass 

        # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
        if "–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)" in text and "üí¨" in text:
            payment_data = parse_message(message)
            if payment_data:
                logging.info(f"Successfully parsed transfer message: {payment_data}")
                await process_bet(payment_data)
            else:
                logging.warning(f"Failed to parse transfer message: {text}")
            return

        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞
        if "–ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞" in text and "USDT" in text:
            logging.info(f"Bot balance replenishment detected: {text}")
            admin_id = os.getenv("ADMIN_USER_ID")
            if admin_id:
                await bot.send_message(
                    chat_id=admin_id,
                    text="üí∞ <b>–ë–∞–ª–∞–Ω—Å CryptoBot —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω.</b>",
                    parse_mode="HTML"
                )
            return

    except Exception as e:
        logging.error(f"Error processing channel message: {e}", exc_info=True)

def parse_message(message: types.Message) -> Optional[Dict]:
    """–ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç CryptoBot –æ –ø–ª–∞—Ç–µ–∂–µ"""
    try:
        comment, game, name, user_id, amount, asset = None, None, None, None, None, None
        logging.info(f"Parsing message: {message.text}")
        logging.info(f"Message entities: {message.entities}")

        if message.entities:
            if message.entities[0].user:
                user = message.entities[0].user
                name = user.full_name
                msg_text = message.text[len(name):].replace("ü™ô", "").split("üí¨")[0]
                name = re.sub(r'@[\w]+', '***', name) if '@' in name else name
                user_id = int(user.id)
                asset = msg_text.split("–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)")[1].split()[1]
                amount = float(msg_text.split("($")[1].split(').')[0].replace(',', ""))
                
                logging.info(f"Parsed user: {name} ({user_id})")
                logging.info(f"Parsed amount: {amount} {asset}")

                if 'üí¨' in message.text:
                    comment = message.text.split("üí¨ ")[1].lower()
                    logging.info(f"Parsed comment: {comment}")
                else:
                    logging.warning("No comment found in message")
                    comment = None
                    game = None

        if comment is not None:
            # –£–¥–∞–ª—è–µ–º —ç—Ç—É –ª–æ–≥–∏–∫—É, —Ç–∞–∫ –∫–∞–∫ game –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –≤ process_bet
            # game = comment.replace("—ë", "–µ")
            # game = game.replace("–Ω–æ–µ", "")
            # game = game.replace(" ", "")
            # logging.info(f"Processed game comment: {game}")

            result = {
                'id': user_id,
                'name': name,
                'usd_amount': amount,
                'asset': asset,
                'comment': comment,
                # 'game': game # –£–¥–∞–ª–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ game
            }
            logging.info(f"Parsed payment message result: {result}")
            return result
    except Exception as e:
        logging.error(f"Error parsing payment message: {e}")
        return None

def parse_game_type_and_bet(comment: str):
    comment = comment.lower().replace(" ", "").replace("—ë", "–µ")
    basketball_words = ["–º–∏–º–æ", "–≥–æ–ª"]
    if comment in basketball_words:
        return "basketball", comment
    darts_words = ["–±–µ–ª–æ–µ", "–∫—Ä–∞—Å–Ω–æ–µ", "—è–±–ª–æ—á–∫–æ", "–ø—Ä–æ–º–∞—Ö"]
    if comment in darts_words:
        return "darts", comment
    slots_words = ["–∫–∞–∑–∏–∫", "—Å–ª–æ—Ç—ã", "777", "–¥–∂–µ–∫–ø–æ—Ç"]
    if comment in slots_words:
        return "slots", comment
    bowling_words = ["–±–æ—É–ª", "–±–æ—É–ª–∏–Ω–≥", "–±–æ—É–ª–ø–æ–±–µ–¥–∞", "–±–æ—É–ª–ø–æ—Ä–∞–∂–µ–Ω–∏–µ", "—Å—Ç—Ä–∞–π–∫", "–±–æ—É–ª–ø—Ä–æ–º–∞—Ö"]
    if comment in bowling_words:
        return "bowling", comment
    cube_words = ["—á–µ—Ç", "–Ω–µ—á–µ—Ç", "–±–æ–ª—å—à–µ", "–º–µ–Ω—å—à–µ", "–ø–ª–∏–Ω–∫–æ", "–ø–ª", "—Å–µ–∫—Ç–æ—Ä1", "—Å–µ–∫—Ç–æ—Ä 1", "—Å–µ–∫—Ç–æ—Ä2", "—Å–µ–∫—Ç–æ—Ä 2", "—Å–µ–∫—Ç–æ—Ä3", "—Å–µ–∫—Ç–æ—Ä 3", "—Å1", "—Å2", "—Å3", "1", "2", "3", "4", "5", "6"]
    if comment in cube_words:
        return "cube", comment
    two_dice_words = ["–Ω–∏—á—å—è", "–ø–æ–±–µ–¥–∞1", "–ø–æ–±–µ–¥–∞2", "–ø1", "–ø2"]
    if comment in two_dice_words:
        return "two_dice", comment
    rps_words = ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞", "–∫", "–Ω", "–±"]
    if comment in rps_words:
        return "rock_paper_scissors", comment
    return None, None

async def process_bet(data: Dict):
    if data.get('id') == LOGS_ID:
        return
    try:
        user_id = data['id']
        if not data.get('comment'):
            error_text = (
                f"<code>{data['name']}</code> <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b> \n\n"
                f"<blockquote><b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã</b> \n"
                f"‚Ä¢ <b>–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>\n"
                f"‚Ä¢ <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>\n"
                f"‚Ä¢ <b>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∑–∞ –≤—ã–ø–ª–∞—Ç–æ–π</b></blockquote>"
            )
            await bot.send_message(
                chat_id=BETS_ID,
                text=error_text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=SUPPORT_LINK)],
                    [InlineKeyboardButton(text='üí¨ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', url=GIDE_LINK)]
                ])
            )
            return
            
        game_type = data.get('game')
        bet_type = data.get('comment')
        
        # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º
        if not game_type:
            game_type, bet_type = parse_game_type_and_bet(data['comment'])

        if not game_type or not bet_type:
            error_text = (
                f"<code>{data['name']}</code> <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b> \n\n"
                f"<blockquote><b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã</b> \n"
                f"‚Ä¢ <b>–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>\n"
                f"‚Ä¢ <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>\n"
                f"‚Ä¢ <b>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∑–∞ –≤—ã–ø–ª–∞—Ç–æ–π</b></blockquote>"
            )
            await bot.send_message(
                chat_id=BETS_ID,
                text=error_text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=SUPPORT_LINK)]
                ])
            )
            return
        await db.add_to_queue(
            user_id=data['id'],
            amount=float(data['usd_amount']),
            game=game_type,
            bet_type=bet_type
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
        await bot.send_message(
            chat_id=data['id'],
            text=f"‚úÖ <b>–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
                 f"<b>–ò–≥—Ä–∞:</b> {GAMES_DATA[game_type]['name']}\n"
                 f"<b>–ò—Å—Ö–æ–¥:</b> {GAMES_DATA[game_type]['types'][bet_type]}\n"
                 f"<b>–°—É–º–º–∞:</b> <code>{data['usd_amount']}$</code>",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –∏–≥—Ä—É", url=BETS_LINK)]
                ]),
            parse_mode="HTML"
        )

        bet_msg = await bot.send_message(
            chat_id=BETS_ID,
            text=f"üé∞ /// <b>–ù–û–í–ê–Ø –°–¢–ê–í–ö–ê</b>\n\n"
                 f"<blockquote><b>–ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞:</b> {data['name']}\n\n"
                 f"<b>–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏:</b> {data['usd_amount']}$\n\n"
                 f"<b>–ò—Å—Ö–æ–¥ —Å—Ç–∞–≤–∫–∏:</b> {data['comment']}</blockquote>",
            parse_mode="HTML"
        )
        game_classes = {
            'cube': CubeGame,
            'two_dice': TwoDiceGame,
            'rock_paper_scissors': RockPaperScissorsGame,
            'basketball': BasketballGame,
            'darts': DartsGame,
            'slots': SlotsGame,
            'bowling': BowlingGame
        }
        game = game_classes[game_type](Decimal(str(data['usd_amount'])))
        dice_value = None
        second_dice_value = None
        if game_type == 'rock_paper_scissors':
            player_emoji = game.get_emoji(bet_type)
            await bot.send_message(
                chat_id=BETS_ID,
                text=player_emoji,
                reply_to_message_id=bet_msg.message_id
            )
            await asyncio.sleep(2)
            bot_choice_value = random.randint(1, 3)
            bot_choices = {1: "–∫–∞–º–µ–Ω—å", 2: "–Ω–æ–∂–Ω–∏—Ü—ã", 3: "–±—É–º–∞–≥–∞"}
            bot_choice = bot_choices.get(bot_choice_value, "–∫–∞–º–µ–Ω—å")
            bot_emoji = game.BET_EMOJIS[bot_choice]
            await bot.send_message(
                chat_id=BETS_ID,
                text=bot_emoji,
                reply_to_message_id=bet_msg.message_id
            )
            dice_value = bot_choice_value
        elif game_type in ['basketball', 'darts', 'slots', 'bowling']:
            emoji_map = {
                'basketball': 'üèÄ',
                'darts': 'üéØ',
                'slots': 'üé∞',
                'bowling': 'üé≥'
            }
            dice_msg = await bot.send_dice(
                chat_id=BETS_ID,
                emoji=emoji_map[game_type],
                reply_to_message_id=bet_msg.message_id
            )
            dice_value = dice_msg.dice.value
            if game_type == 'bowling' and any(x in bet_type for x in ["–±–æ—É–ª–ø–æ–±–µ–¥–∞", "–±–æ—É–ª–ø–æ—Ä–∞–∂–µ–Ω–∏–µ", "–±–æ—É–ª–∏–Ω–≥–ø–æ–±–µ–¥–∞", "–±–æ—É–ª–∏–Ω–≥–ø–æ—Ä–∞–∂–µ–Ω–∏–µ", "–ø–æ–±–µ–¥–∞", "–ø–æ—Ä–∞–∂–µ–Ω–∏–µ"]):
                await asyncio.sleep(2)
                second_dice_msg = await bot.send_dice(
                    chat_id=BETS_ID,
                    emoji='üé≥',
                    reply_to_message_id=bet_msg.message_id
                )
                second_dice_value = second_dice_msg.dice.value
        else:
            dice_msg = await bot.send_dice(
                chat_id=BETS_ID,
                emoji=game.get_emoji(bet_type) if hasattr(game, 'get_emoji') else game.EMOJI,
                reply_to_message_id=bet_msg.message_id
            )
            dice_value = dice_msg.dice.value
            if game_type == 'two_dice':
                await asyncio.sleep(2)
                second_dice_msg = await bot.send_dice(
                    chat_id=BETS_ID,
                    emoji=game.get_emoji(bet_type) if hasattr(game, 'get_emoji') else game.EMOJI,
                    reply_to_message_id=bet_msg.message_id
                )
                second_dice_value = second_dice_msg.dice.value
        if game_type == 'two_dice' or (game_type == 'bowling' and 'second_dice_value' in locals()):
            result = await game.process(bet_type, dice_value, locals().get('second_dice_value'))
        else:
            result = await game.process(bet_type, dice_value)
        await asyncio.sleep(2)
        await db.add_transaction(
            user_id=data['id'],
            amount=-float(data['usd_amount']),
            type='game',
            game_type=game_type
        )
        referrer_id = await db.get_referrer(data['id'])
        if referrer_id:
            if result.won:
                ref_penalty = float(result.amount) * 0.15
                await db.update_ref_balance(referrer_id, -ref_penalty)
                await bot.send_message(
                    chat_id=referrer_id,
                    text=f"üí∏ –° –≤–∞—à–µ–≥–æ –†–µ—Ñ.–ë–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ <code>{ref_penalty:.2f}$</code> –∏–∑-–∑–∞ –≤—ã–∏–≥—Ä—ã—à–∞ <code>{data['name']}</code>",
                    parse_mode="HTML"
                )
            else:
                ref_reward = float(data['usd_amount']) * 0.15
                await db.update_ref_balance(referrer_id, ref_reward)
                await bot.send_message(
                    chat_id=referrer_id,
                    text=f"üíµ –í–∞—à –†–µ—Ñ.–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <code>{ref_reward:.2f}$</code> –∏–∑-–∑–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–∞ <code>{data['name']}</code>",
                    parse_mode="HTML"
                )
        if result.won and result.draw == False:
            win_amount = float(result.amount)
            check_result = await create_payment_check(win_amount)
            if check_result and 'check_link' in check_result:
                check_token = str(uuid.uuid4())[:8]
                await db.save_win_check_token(
                    token=check_token,
                    user_id=data['id'],
                    amount=win_amount,
                    check_link=check_result['check_link'] # –ü–µ—Ä–µ–¥–∞–µ–º check_link
                )
                message_text = (
                    f"<b>üçÄ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏!</b>\n\n"
                    f"<blockquote>‚Ä¢ <b>–£–¥–∞—á–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {result.amount:.2f}$!</b>\n"
                    f"‚Ä¢ <b>–ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ</b></blockquote>\n\n"
                    f"<b>{await links()}</b>"
                )
                if not await db.has_seen_instruction(user_id):
                    await db.mark_instruction_seen(user_id)
                    await bot.send_photo(
                        chat_id=BETS_ID,
                        photo=types.FSInputFile("win.jpg"),
                        caption=message_text,
                        parse_mode="HTML",
                        reply_to_message_id=bet_msg.message_id,
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text=f"üí∏ –ó–∞–±—Ä–∞—Ç—å {win_amount:.2f}$", url=f"https://t.me/{(await bot.get_me()).username}?start={check_token}")],
                            [InlineKeyboardButton(text="üí¨ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=GIDE_LINK)],
                            [InlineKeyboardButton(text='ü§ñ C–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É', url="https://t.me/BunnyCasinoRobot?start=games")]

                        ])
                    )
                else:
                    await bot.send_photo(
                        chat_id=BETS_ID,
                        photo=types.FSInputFile("win.jpg"),
                        caption=message_text,
                        parse_mode="HTML",
                        reply_to_message_id=bet_msg.message_id,
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text=f"üí∏ –ó–∞–±—Ä–∞—Ç—å {win_amount:.2f}$", url=f"https://t.me/{(await bot.get_me()).username}?start={check_token}")],
                            [InlineKeyboardButton(text='ü§ñ C–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É', url="https://t.me/BunnyCasinoRobot?start=games")]

                        ])
                    )
            else:
                message_text = (
                    f"<b>üçÄ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏!</b>\n\n"
                    f"<blockquote>‚Ä¢ <b>–£–¥–∞—á–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –≤—ã–∏–≥—Ä—ã—à –≤ —Ä–∞–∑–º–µ—Ä–µ {result.amount:.2f}$ –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω –≤—Ä—É—á–Ω—É—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!</b></blockquote>\n\n"
                    f"<b>{await links()}</b>"
                )
                if not await db.has_seen_instruction(user_id):
                    await db.mark_instruction_seen(user_id)
                    await bot.send_photo(
                        chat_id=BETS_ID,
                        photo=types.FSInputFile("win.jpg"),
                        caption=message_text,
                        parse_mode="HTML",
                        reply_to_message_id=bet_msg.message_id,
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text=f"–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=SUPPORT_LINK)],
                            [InlineKeyboardButton(text="üí¨ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=GIDE_LINK)],
                            [InlineKeyboardButton(text='ü§ñ C–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É', url="https://t.me/BunnyCasinoRobot?start=games")]

                        ])
                    )
                else:
                    await bot.send_photo(
                        chat_id=BETS_ID,
                        photo=types.FSInputFile("win.jpg"),
                        caption=message_text,
                        parse_mode="HTML",
                        reply_to_message_id=bet_msg.message_id,
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text=f"–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=SUPPORT_LINK)],
                            [InlineKeyboardButton(text='ü§ñ C–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É', url="https://t.me/BunnyCasinoRobot?start=games")]

                        ])
                    )
                await bot.send_message(
                    chat_id=LOGS_ID,
                    text=f"‚ö†Ô∏è <b>–¢–†–ï–ë–£–ï–¢–°–Ø –†–£–ß–ù–ê–Ø –í–´–ü–õ–ê–¢–ê</b>\n\n"
                         f"<b>–ò–≥—Ä–æ–∫:</b> <code>{data['name']}</code>\n"
                         f"<b>ID:</b> <code>{data['id']}</code>\n"
                         f"<b>–°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞:</b> <code>{result.amount:.2f}$</code>\n"
                         f"<b>–¢–∏–ø —Å—Ç–∞–≤–∫–∏:</b> <code>{data['comment']}</code>\n"
                         f"<b>–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏:</b> <code>{data['usd_amount']}$</code>\n"
                         f"<b>–¢–∏–ø –∏–≥—Ä—ã:</b> <code>{game_type}</code>",
                    parse_mode="HTML"
                )

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            await db.add_transaction(
                user_id=data['id'],
                amount=win_amount, # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞
                type='game',
                game_type=game_type
            )
        elif result.won == False and result.draw == False:
            message_text = (
                f"<b>üö´ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏...</b>\n\n"
                f"<blockquote>‚Ä¢ <b>–í —ç—Ç–æ—Ç —Ä–∞–∑ —É–¥–∞—á–∞ –ø—Ä–æ—Å–∫–∞–∫–∞–ª–∞ –º–∏–º–æ –≤–∞—Å, –Ω–æ –Ω–µ —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è! 99% –∏–≥—Ä–æ–∫–æ–≤ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –ø–µ—Ä–µ–¥ –∫–Ω—Ä—É–ø–Ω—ã –≤—ã–∏–≥—Ä—ã—à–µ–º!</b></blockquote>\n\n"
                f"<b>{await links()}</b>"
            )
            if not await db.has_seen_instruction(user_id):
                await db.mark_instruction_seen(user_id)
                await bot.send_photo(
                    chat_id=BETS_ID,
                    photo=types.FSInputFile("lose.jpg"),
                    caption=message_text,
                    parse_mode="HTML",
                    reply_to_message_id=bet_msg.message_id,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üí¨ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=GIDE_LINK)],
                        [InlineKeyboardButton(text='ü§ñ C–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É', url="https://t.me/BunnyCasinoRobot?start=games")]

                    ])
                )
            else:
                await bot.send_photo(
                chat_id=BETS_ID,
                    photo=types.FSInputFile("lose.jpg"),
                    caption=message_text,
                    parse_mode="HTML",
                    reply_to_message_id=bet_msg.message_id,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text='ü§ñ C–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É', url="https://t.me/BunnyCasinoRobot?start=games")]

                    ])
                )
        else:
            win_amount = float(result.amount)
            check_result = await create_payment_check(win_amount)
            if check_result and 'check_link' in check_result:
                check_token = str(uuid.uuid4())[:8]
                await db.save_win_check_token(
                    token=check_token,
                    user_id=data['id'],
                    amount=win_amount,
                    check_link=check_result['check_link']
                )

                message_text = (
                    f"<b>‚ùé –ù–∏—á—å—è </b>\n\n"
                    f"<blockquote>‚Ä¢ <b>–ù–∏—á—å—è ‚Äî –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏ {result.amount:.2f}$!</b></blockquote>\n\n"
                    f"<b>{await links()}</b>"
                )
                if not await db.has_seen_instruction(user_id):
                    await db.mark_instruction_seen(user_id)
                    await bot.send_photo(
                        chat_id=BETS_ID,
                        photo=types.FSInputFile("draw.jpg"),
                        caption=message_text,
                        parse_mode="HTML",
                        reply_to_message_id=bet_msg.message_id,
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text=f"–ó–∞–±—Ä–∞—Ç—å {win_amount:.2f}$", url=f"https://t.me/{(await bot.get_me()).username}?start={check_token}")],
                            [InlineKeyboardButton(text="üí¨ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=GIDE_LINK)],
                            [InlineKeyboardButton(text='ü§ñ C–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É', url="https://t.me/BunnyCasinoRobot?start=games")]

                        ])
                    )
                else:
                    await bot.send_photo(
                        chat_id=BETS_ID,
                        photo=types.FSInputFile("draw.jpg"),
                        caption=message_text,
                        parse_mode="HTML",
                        reply_to_message_id=bet_msg.message_id,
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text=f"–ó–∞–±—Ä–∞—Ç—å {win_amount:.2f}$", url=f"https://t.me/{(await bot.get_me()).username}?start={check_token}")],
                            [InlineKeyboardButton(text='ü§ñ C–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É', url="https://t.me/BunnyCasinoRobot?start=games")]

                        ])
                    )

    except Exception as e:
        logging.error(f"Error processing bet: {e}")

async def main():
    await bot.set_my_commands([
        types.BotCommand(command="start", description="–ú–µ–Ω—é"),
        types.BotCommand(command="games", description="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã"),
        types.BotCommand(command="refs", description="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"),
        types.BotCommand(command="profile", description="–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å"),
        types.BotCommand(command="stats", description="–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.BotCommand(command="cancel", description="–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"),
    ])

    await db.init()

    cmds = await bot.get_my_commands()
    print("üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:", cmds)
    
    asyncio.create_task(check_invoices_periodically()) # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    
    await dp.start_polling(bot)


@dp.callback_query(lambda c: c.data == "withdraw_ref_balance")
async def withdraw_ref_balance(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user = await db.get_user(user_id)
    ref_balance = user.get('ref_balance', 0)
    

    min_withdraw = 1
    
    if ref_balance < min_withdraw:
        await callback_query.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: {min_withdraw}$", show_alert=True)
        return
    

    withdraw_token = f"REF{user_id}_{int(time.time())}"
    

    await db.update_ref_balance(user_id, -ref_balance)
    

    await db.add_transaction(
        user_id=user_id,
        amount=-float(ref_balance),
        type='withdraw',
        game_type='ref_balance'
    )
    

    await bot.send_message(
        chat_id=user_id,
        text=f"<b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Ä–µ—Ñ.–±–∞–ª–∞–Ω—Å–∞ —Å–æ–∑–¥–∞–Ω</b>\n\n"
             f"<blockquote>‚Ä¢ <b>–°—É–º–º–∞ –∫ –≤—ã–≤–æ–¥—É:</b> <code>{ref_balance:.2f}$</code>\n"
             f"‚Ä¢ <b>–î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞:</b> <code>{time.strftime('%d.%m.%Y %H:%M')}</code>\n"
             f"‚Ä¢ <b>–°—Ç–∞—Ç—É—Å:</b> <code>–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</code></blockquote>\n\n"
             f"<b>–í–∞—à —Ç–æ–∫–µ–Ω:</b>\n"
             f"<code>{withdraw_token}</code>\n\n"
             f"<blockquote><b>–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã.</b></blockquote>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=SUPPORT_LINK)]
        ])
    )
    

    await bot.send_message(
        chat_id=LOGS_ID,
        text=f"<b>–ó–ê–ü–†–û–° –ù–ê –í–´–í–û–î –†–ï–§.–ë–ê–õ–ê–ù–°–ê</b>\n\n"
             f"<blockquote>‚Ä¢ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {callback_query.from_user.mention_html()}\n"
             f"‚Ä¢ <b>ID:</b> <code>{user_id}</code>\n"
             f"‚Ä¢ <b>–°—É–º–º–∞:</b> <code>{ref_balance:.2f}$</code>\n"
             f"‚Ä¢ <b>–î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞:</b> <code>{time.strftime('%d.%m.%Y %H:%M')}</code></blockquote>\n\n"
             f"<b>–¢–æ–∫–µ–Ω –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã:</b>\n"
             f"<code>{withdraw_token}</code>",
        parse_mode="HTML"
    )
    
    await callback_query.answer()

@dp.message()
async def log_all_messages(message: types.Message):
    """–¢–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ª–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    logging.info(f"Received message: {message.text or message.caption}")
    logging.info(f"From: {message.from_user.id} in chat: {message.chat.id}")
    logging.info(f"Entities: {message.entities}")

async def check_invoices_periodically():
    while True:
        try:
            logging.info("Checking for paid invoices...")
            invoices_data = await crypto_pay.get_invoices(status="paid", count=100) # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤
            invoices = invoices_data.get('result', {}).get('items', []) # –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞

            for invoice in invoices:
                payload = invoice.get('payload')
                status = invoice.get('status')
                invoice_id = invoice.get('invoice_id') # –ò—Å–ø–æ–ª—å–∑—É–µ–º invoice_id –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏

                if payload and status == 'paid': # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã —Å payload
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –∏–Ω–≤–æ–π—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
                    bet_data_from_db = await db.get_invoice_bet(payload)
                    
                    if bet_data_from_db and bet_data_from_db['status'] == 'pending': # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–≤–æ–π—Å –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π –ë–î –∏ –æ–Ω –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
                        logging.info(f"Found new paid invoice: {invoice_id} with payload {payload}. Processing...")
                        
                        user_info = None
                        try:
                            user_info = await bot.get_chat(bet_data_from_db['user_id'])
                            user_name = user_info.full_name if user_info else f"User {bet_data_from_db['user_id']}"
                        except Exception:
                            user_name = f"User {bet_data_from_db['user_id']}"

                        data_for_process_bet = {
                            'id': bet_data_from_db['user_id'],
                            'name': user_name,
                            'usd_amount': bet_data_from_db['amount'],
                            'comment': bet_data_from_db['bet_type_key'],
                            'game': bet_data_from_db['game_key']
                        }
                        await process_bet(data_for_process_bet)
                        await db.mark_invoice_bet_paid(payload)
                        logging.info(f"Invoice bet {invoice_id} processed and marked as paid.")
                    elif bet_data_from_db and bet_data_from_db['status'] == 'paid':
                        pass
                    else:
                       
                        pass 

        except Exception as e:
            logging.error(f"Error checking invoices periodically: {e}", exc_info=True)

        await asyncio.sleep(10) # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

if __name__ == '__main__':
    asyncio.run(main())